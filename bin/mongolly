#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'time'
require 'mongolly'

module Mongolly
  class Runner < Thor
    class_option :config, :type => :string, aliases: '-c', default: '~/.mongolly', desc: 'Path to config file'

    desc "backup", "Snapshots the Database EBS Volumes"
    method_option :dry_run, type: :boolean, desc: 'Step through command without changes'
    def backup
      Shepherd.new({dry_run: options[:dry_run]}.merge(config)).backup
    end

    desc "clean", "Removes old Database EBS Snapshots"
    method_option :age, aliases: '-a', required: true
    method_option :dry_run, type: :boolean, desc: 'Step through command without changes'
    def clean
      age = Time.parse(options[:age])
      Shepherd.new({dry_run: options[:dry_run]}.merge(config)).cleanup(age)
    end

  private
    def config
      @config ||= read_config
    end

    def read_config
      unless File.exists? config_path
        seed_config
        exit 1
      end

      begin
        cfg = YAML::load( File.read( config_path ) )
      rescue e
        puts " ** Unable to read config at #{config_path}"
        raise e
      end

      validated_config cfg
    end

    def seed_config
      empty_config = {
        database: [],
        db_username: nil,
        db_password: nil,
        access_key_id: nil,
        secret_access_key: nil,
        region: 'us-east-1',
        log_level: 'info',
        mongo_start_command: nil,
        mongo_stop_command: nil,
        config_server_ssh_user: nil,
        config_server_ssh_keypath: nil,
        balancer_wait: nil
      }

      File.open( config_path, "w" ) do |f|
        f.write( empty_config.to_yaml )
      end

      puts " ** An empty configuration file has been written to #{config_path}."
      puts " ** you must now edit this configuration file with your AWS Credentials,"
      puts " ** MongoDB Connection Details, and the array of volume IDs that you wish"
      puts " ** to snapshot"
    end

    def validated_config(cfg)
      %w(database access_key_id secret_access_key).each do |arg|
        raise ArgumentError.new("#{arg} cannot be empty") if cfg[arg.to_sym].to_s.strip.empty?
      end
      cfg
    end

    def config_path
      config_path ||= File.expand_path(options[:config])
    end
  end
end

Mongolly::Runner.start
